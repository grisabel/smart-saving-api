generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["debian-openssl-1.1.x", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  email            String             @id
  firstname        String /// @encrypted
  lastname         String /// @encrypted
  dateBirth        DateTime
  objective        String /// @encrypted
  deleteIn         DateTime?
  Password         Password?
  Operation        Operation[]
  Session          Session[]
  FinancialAccount FinancialAccount[]
  Concept          Concept[]
  Habits           Habits[]
}

model Password {
  id        String @id @default(uuid())
  hash      String
  user      User   @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  userEmail String @unique
}

model Operation {
  id        String        @id // uuid
  user      User          @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  userEmail String
  type      OperationType
  expiresIn DateTime
  createdAt DateTime      @default(now())

  @@index([userEmail, createdAt])
}

enum OperationType {
  RESET_PASSWORD
  DELETE_ACCOUNT
}

model Session {
  id             String             @id @default(uuid())
  sessionType    SessionType
  createdAt      DateTime           @default(now())
  expiresIn      DateTime?
  ip             String
  reason         SessionReasonType?
  failuresNumber Int?
  user           User               @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  userEmail      String

  @@index([userEmail, createdAt])
}

enum SessionType {
  Session_Start
  Session_End
  Session_Refresh
  Session_Revoke
}

enum SessionReasonType {
  Session_Token_Expired
  Session_User_Logout
}

model RevokeAccessToken {
  id    Int    @id @default(autoincrement())
  token String @db.Text
}

model FinancialAccount {
  id            String        @id @default(uuid())
  accountNumber Int           @default(0)
  user          User          @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  userEmail     String
  transaction   Transaction[]

  @@index([userEmail, accountNumber])
}

model Transaction {
  id        String           @id @default(uuid())
  type      TransactionType
  amount    Float
  concept   Concept          @relation(fields: [conceptId], references: [id], onDelete: Cascade)
  conceptId String
  note      String /// @encrypted
  date      DateTime
  account   FinancialAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId String
  Habits    Habits[]
}

enum TransactionType {
  Transaction_Income
  Transaction_Expense
}

model Concept {
  id          String        @id @default(uuid())
  type        ConceptType
  concept     String
  user        User          @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  userEmail   String
  transaction Transaction[]

  @@index([userEmail, type, concept])
}

enum ConceptType {
  Concept_Income
  Concept_Expense
}

model Habits {
  id            String      @id @default(uuid())
  user          User        @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  userEmail     String
  type          HabitsType
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  transactionId String

  @@index([userEmail, type])
}

enum HabitsType {
  Habits_Alimentation
  Habits_Vehicles
  Habits_Restaurant
  Habits_AntExpenses
}
